{"version":3,"sources":["utils/api/index.js","decks/Deck.js","home/Home.js","decks/StudyCards.js","decks/StudyDeck.js","Layout/NotFound.js","Layout/Header.js","decks/EditDeck.js","decks/DisplayDeck.js","cards/CardForm.js","cards/AddCards.js","cards/EditCard.js","decks/CreateDeck.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","createCard","card","Number","cardId","updatedCard","deleteCard","append","Deck","useState","cardList","setCardList","history","useHistory","useEffect","then","d","find","d2","deleteHandler","window","confirm","go","noOfCards","filter","length","className","style","justifyContent","float","description","to","type","marginLeft","title","onClick","Home","deckList","setDeckList","getDecks","listedDecks","map","StudyCards","props","validCards","flipped","setFlipped","selectedCard","setSelectedCard","back","nextCard","push","front","StudyDeck","selectedDeck","setSelectedDeck","useParams","abortController","AbortController","abort","aria-label","aria-current","NotFound","Header","EditDeck","handleChange","target","value","onSubmit","event","preventDefault","updateDeck","htmlFor","onChange","DisplayDeck","displayDeck","setDisplayDeck","deleteDeckHandler","validCardList","index","deleteCardHandler","CardForm","handleSubmit","cardData","placeholder","required","autofocus","AddCards","setDeck","getDeck","formData","setFormData","EditCard","readCard","updateCard","CreateDeck","createDeckHandler","lastDeck","Layout","path","newDeck","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb53e3f2.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nimport { listDecks, deleteDeck } from \"../utils/api\";\r\n\r\nexport default function Deck({ deck }) {\r\n  const [cardList, setCardList] = useState([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    listDecks().then((d) => {\r\n      const cards = d.find((d2) => d2.id === deck.id).cards;\r\n      setCardList(cards);\r\n    });\r\n  }, [deck.id]);\r\n\r\n  const deleteHandler = async () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this deck? You will not be able to recover it.\"\r\n      )\r\n    ) {\r\n      await deleteDeck(deck.id);\r\n      history.go(0);\r\n    }\r\n  };\r\n\r\n  const noOfCards = cardList && cardList.filter((card) => !card.cards).length;\r\n\r\n  return (\r\n    <div className=\"card m-1\">\r\n      <div className=\"card-body\">\r\n        <div style={{ justifyContent: \"space-between\" }}>\r\n          <p className=\"text-muted\" style={{ float: \"right\" }}>\r\n            {`${noOfCards} cards`}\r\n          </p>\r\n          <h5 className=\"card-title\">{deck.name}</h5>\r\n        </div>\r\n        <p className=\"card-text\">{deck.description}</p>\r\n        <Link to={`/decks/${deck.id}`}>\r\n          <button type=\"button\" className=\"btn btn-secondary\">\r\n            <i className=\"fas fa-eye\"></i> View\r\n          </button>\r\n        </Link>\r\n        <Link to={`/decks/${deck.id}/study`}>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            style={{ marginLeft: \"5px\" }}\r\n          >\r\n            <i className=\"fas fa-book\"></i> Study\r\n          </button>\r\n        </Link>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger\"\r\n          title=\"Delete\"\r\n          style={{ float: \"right\" }}\r\n          onClick={deleteHandler}\r\n        >\r\n          <i className=\"fas fa-trash-alt\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { listDecks } from \"../utils/api\";\r\nimport Deck from \"../decks/Deck\";\r\n\r\nexport default function Home({ deckList, setDeckList }) {\r\n  useEffect(() => {\r\n    async function getDecks() {\r\n      const deckList = await listDecks();\r\n      setDeckList(deckList);\r\n    }\r\n    getDecks();\r\n  }, [setDeckList]);\r\n\r\n  const listedDecks = deckList.map((deck) => (\r\n    <Deck key={deck.id} deck={deck} />\r\n  ));\r\n\r\n  return (\r\n    <main className=\"container mb-3\">\r\n      <Link to=\"decks/new\">\r\n        <button type=\"button\" className=\"btn btn-secondary btn-lg m-1\">\r\n          <i className=\"fas fa-plus\"></i> Create Deck\r\n        </button>\r\n      </Link>\r\n      <section className=\"column\">{listedDecks}</section>\r\n    </main>\r\n  );\r\n}\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function StudyCards(props) {\r\n  const { validCards } = props;\r\n  const history = useHistory();\r\n  const [flipped, setFlipped] = useState(false);\r\n  const [selectedCard, setSelectedCard] = useState(0);\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">\r\n          {\"Card \" + Number(selectedCard + 1) + \" of \" + validCards.length}\r\n        </h5>\r\n        {!flipped ? (\r\n          <Fragment>\r\n            <p className=\"card-text\">{validCards[selectedCard].front}</p>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              onClick={() => setFlipped(true)}\r\n            >\r\n              Flip\r\n            </button>\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <p className=\"card-text\">{validCards[selectedCard].back}</p>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary mr-2\"\r\n              onClick={() => setFlipped(false)}\r\n            >\r\n              Flip\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={() => {\r\n                const nextCard = selectedCard + 1;\r\n                if (validCards[nextCard]) {\r\n                  setSelectedCard(nextCard);\r\n                  setFlipped(false);\r\n                } else if (window.confirm(\"Restart Cards?\")) {\r\n                  setSelectedCard(0);\r\n                  setFlipped(false);\r\n                } else {\r\n                  history.push(\"/\");\r\n                }\r\n              }}\r\n            >\r\n              Next\r\n            </button>\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\n\r\nimport { readDeck } from \"../utils/api\";\r\nimport StudyCards from \"./StudyCards\";\r\n\r\nexport default function StudyDeck({ selectedDeck, setSelectedDeck }) {\r\n  const [cardList, setCardList] = useState([]);\r\n  const { deckId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then((deck) => {\r\n      setSelectedDeck(deck);\r\n      setCardList(deck.cards);\r\n    });\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId, setSelectedDeck]);\r\n\r\n  const validCards = cardList && cardList.filter((card) => !card.cards);\r\n\r\n  return (\r\n    <Fragment>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">\r\n              <i className=\"fas fa-home\"></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Study\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1>{\"Study: \" + selectedDeck.name}</h1>\r\n      {cardList.length > 0 && validCards.length > 2 ? (\r\n        <StudyCards validCards={validCards} />\r\n      ) : (\r\n        <Fragment>\r\n          <h3>Not enough cards.</h3>\r\n          <p>\r\n            {\"You need at least 3 cards to study. There are \" +\r\n              validCards.length +\r\n              \" cards in the deck.\"}\r\n          </p>\r\n          <Link to={`/decks/${selectedDeck.id}/cards/new`}>\r\n            <button type=\"button\" className=\"btn btn-primary\">\r\n              <i className=\"fas fa-plus\"></i> Add Cards\r\n            </button>\r\n          </Link>\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useEffect } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { readDeck, updateDeck } from \"../utils/api\";\r\n\r\nexport default function EditDeck({ selectedDeck, setSelectedDeck }) {\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then(setSelectedDeck);\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId, setSelectedDeck]);\r\n\r\n  const handleChange = ({ target }) => {\r\n    setSelectedDeck({\r\n      ...selectedDeck,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    updateDeck(selectedDeck);\r\n    history.push(`/decks/${deckId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">\r\n              <i className=\"fas fa-home\"></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Edit Deck\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1>Edit Deck</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"name\">Name</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"name\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={handleChange}\r\n            value={selectedDeck.name}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"description\">Description</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"description\"\r\n            type=\"text\"\r\n            name=\"description\"\r\n            onChange={handleChange}\r\n            value={selectedDeck.description}\r\n          />\r\n        </div>\r\n        <div className=\"buttons mb-3\">\r\n          <Link\r\n            to={`/decks/${selectedDeck.id}`}\r\n            type=\"button\"\r\n            className=\"btn btn-secondary mr-2\"\r\n          >\r\n            Cancel\r\n          </Link>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { readDeck, deleteDeck, deleteCard } from \"../utils/api\";\r\n\r\nexport default function DisplayDeck({ deck }) {\r\n  const [displayDeck, setDisplayDeck] = useState([]);\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then(setDisplayDeck);\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  const cardList = displayDeck && displayDeck.cards;\r\n  const validCards = cardList && cardList.filter((card) => !card.cards);\r\n\r\n  const deleteDeckHandler = async () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this deck? You will not be able to recover it.\"\r\n      )\r\n    ) {\r\n      await deleteDeck(deckId);\r\n      history.go(0);\r\n    }\r\n  };\r\n\r\n  async function deleteCardHandler(card) {\r\n    const id = card.id;\r\n    await deleteCard(id);\r\n    history.go(0);\r\n  }\r\n\r\n  const validCardList =\r\n    validCards &&\r\n    validCards.map((card, index) => (\r\n      <div className=\"card\" key={index}>\r\n        <div className=\"card-body row\">\r\n          <div className=\"col-6\">\r\n            <p className=\"text-muted\">{card.front}</p>\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <p className=\"text-muted\">{card.back}</p>\r\n          </div>\r\n          <br />\r\n          <div className=\"ml-auto\">\r\n            {/* Edit Card */}\r\n            <Link to={`/decks/${displayDeck.id}/cards/${card.id}/edit`}>\r\n              <button type=\"button\" className=\"btn btn-secondary mr-2\">\r\n                <i className=\"fas fa-pencil-alt\"></i> Edit\r\n              </button>\r\n            </Link>\r\n            {/* Delete Card */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger\"\r\n              title=\"Delete\"\r\n              onClick={() => {\r\n                if (window.confirm(\"Delete this card?\"))\r\n                  deleteCardHandler(card);\r\n              }}\r\n            >\r\n              <i className=\"fas fa-trash-alt\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ));\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">\r\n              <i className=\"fas fa-home\"></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            {displayDeck.name}\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <div>\r\n        <h3>{displayDeck.name}</h3>\r\n        <p>{displayDeck.description}</p>\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        {/* Edit Deck */}\r\n        <Link to={`/decks/${displayDeck.id}/edit`}>\r\n          <button type=\"button\" className=\"btn btn-secondary mr-2\">\r\n            <i className=\"fas fa-pencil-alt\"></i> Edit\r\n          </button>\r\n        </Link>\r\n        {/* Study Deck */}\r\n        <Link to={`/decks/${displayDeck.id}/study`}>\r\n          <button type=\"button\" className=\"btn btn-primary mr-2\">\r\n            <i className=\"fas fa-book\"></i> Study\r\n          </button>\r\n        </Link>\r\n        {/* Add Cards */}\r\n        <Link to={`/decks/${displayDeck.id}/cards/new`}>\r\n          <button type=\"button\" className=\"btn btn-primary\">\r\n            <i className=\"fas fa-plus\"></i> Add Cards\r\n          </button>\r\n        </Link>\r\n        {/* Delete Deck */}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger ml-auto\"\r\n          title=\"Delete\"\r\n          onClick={deleteDeckHandler}\r\n        >\r\n          <i className=\"fas fa-trash-alt\"></i>\r\n        </button>\r\n      </div>\r\n      <br />\r\n      <div className=\"mb-3\">\r\n        <h2>Cards</h2>\r\n        <section className=\"column\">{validCardList}</section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function CardForm({\r\n  handleChange,\r\n  handleSubmit,\r\n  cardData,\r\n  deck,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"name\">Front</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          name=\"front\"\r\n          id=\"front\"\r\n          placeholder=\"Front side of card\"\r\n          onChange={handleChange}\r\n          value={cardData.front}\r\n          required=\"true\"\r\n          autofocus=\"true\"\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"description\">Back</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          name=\"back\"\r\n          id=\"back\"\r\n          placeholder=\"Back side of card\"\r\n          onChange={handleChange}\r\n          value={cardData.back}\r\n          required=\"true\"\r\n        />\r\n      </div>\r\n      <div className=\"buttons mb-3\">\r\n        <Link to={`/decks/${deck.id}`} className=\"btn btn-secondary mr-2\">\r\n          Done\r\n        </Link>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Save\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { readDeck, createCard } from \"../utils/api\";\r\nimport CardForm from \"./CardForm\";\r\n\r\nexport default function AddCards() {\r\n  const [deck, setDeck] = useState([]);\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    async function getDeck() {\r\n      const deck = await readDeck(deckId);\r\n      setDeck(deck);\r\n    }\r\n    getDeck();\r\n  }, [deckId, setDeck]);\r\n\r\n  const initialState = {\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n\r\n  const [formData, setFormData] = useState({ ...initialState });\r\n  const handleChange = ({ target }) => {\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await createCard(deckId, formData);\r\n    history.go(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">\r\n              <i className=\"fas fa-home\"></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            <Link to={`/decks/${deck.id}`}>{deck.name}</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Add Card\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h3>{deck.name + \": Add Card\"}</h3>\r\n      <CardForm\r\n        handleChange={handleChange}\r\n        handleSubmit={handleSubmit}\r\n        cardData={formData}\r\n        deck={deck}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { readCard, readDeck, updateCard } from \"../utils/api\";\r\nimport Card from \"./AddCards\";\r\n\r\nexport default function EditCard({ selectedDeck, setSelectedDeck }) {\r\n  const history = useHistory();\r\n  const [selectedCard, setSelectedCard] = useState([]);\r\n  const { deckId, cardId } = useParams();\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then((deck) => {\r\n      setSelectedDeck(deck);\r\n      readCard(cardId, abortController.signal).then(setSelectedCard);\r\n    });\r\n  }, [deckId, cardId, setSelectedDeck]);\r\n\r\n  const handleChange = ({ target }) => {\r\n    setSelectedCard({\r\n      ...selectedCard,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    updateCard(selectedCard);\r\n    history.push(`/decks/${selectedDeck.id}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">\r\n              <i className=\"fas fa-home\"></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            {\"Edit Card \" + cardId}\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h3>Edit Card</h3>\r\n      <Card\r\n        handleChange={handleChange}\r\n        handleSubmit={handleSubmit}\r\n        cardData={selectedCard}\r\n        selectedDeck={selectedDeck}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { createDeck } from \"../utils/api/index\";\r\n\r\nexport default function CreateDeck({ deckList, createDeckHandler }) {\r\n  const history = useHistory();\r\n\r\n  const initialState = {\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  let lastDeck = deckList[deckList.length - 1];\r\n\r\n  const [formData, setFormData] = useState({ ...initialState });\r\n  const handleChange = ({ target }) => {\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const response = await createDeck(formData);\r\n    createDeckHandler(response);\r\n    history.push(`/decks/${lastDeck.id + 1}`);\r\n    history.go(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">\r\n              <i className=\"fas fa-home\"></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Create Deck\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1> Create Deck</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"name\">Name</label> <br />\r\n        <input\r\n          className=\"form-control\"\r\n          id=\"name\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Deck Name\"\r\n          onChange={handleChange}\r\n          value={formData.name}\r\n        />{\" \"}\r\n        <br />\r\n        <br />\r\n        <label htmlFor=\"description\">Description</label>\r\n        <br />\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"description\"\r\n          type=\"text\"\r\n          name=\"description\"\r\n          placeholder=\"Brief description of the deck\"\r\n          onChange={handleChange}\r\n          value={formData.description}\r\n        />{\" \"}\r\n        <br />\r\n        <div className=\"buttons mb-3\">\r\n          <button type=\"submit\" className=\"btn btn-primary mr-2\">\r\n            Submit\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => history.push(\"/\")}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Home from \"../home/Home\";\nimport StudyDeck from \"../decks/StudyDeck\";\nimport NotFound from \"./NotFound\";\nimport Header from \"./Header\";\nimport EditDeck from \"../decks/EditDeck\";\nimport DisplayDeck from \"../decks/DisplayDeck\";\nimport EditCard from \"../cards/EditCard\";\nimport AddCards from \"../cards/AddCards\";\nimport CreateDeck from \"../decks/CreateDeck\";\n\nfunction Layout() {\n  const [deckList, setDeckList] = useState([]);\n  const [selectedDeck, setSelectedDeck] = useState([]);\n\n  const createDeckHandler = (newDeck) => {\n    setDeckList([...deckList, newDeck]);\n  };\n\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/decks/new\">\n            <CreateDeck\n              deckList={deckList}\n              createDeckHandler={createDeckHandler}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <StudyDeck\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeck\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCards />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCard\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route exact={true} path=\"/decks/:deckId\">\n            <DisplayDeck />\n          </Route>\n          <Route exact={true} path=\"/decks\">\n            <Redirect to=\"/\" />\n          </Route>\n          <Route exact={true} path=\"/\">\n            <Home deckList={deckList} setDeckList={setDeckList} />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}